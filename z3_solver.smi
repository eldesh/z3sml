_require "basis.smi"
_require "ffi.smi"

structure Z3_Solver =
struct
  type Z3_context = unit ptr
  type Z3_solver  = unit ptr
  type Z3_symbol  = unit ptr
  type Z3_tactic  = unit ptr
  type Z3_params  = unit ptr
  type Z3_param_descrs = unit ptr
  type Z3_model   = unit ptr
  type Z3_stats   = unit ptr
  type Z3_ast     = unit ptr
  type Z3_ast_vector = unit ptr
  type Z3_string  = String.string
  type Z3_lbool = int

  val Z3_mk_solver
    : Z3_context -> Z3_solver
     
  val Z3_mk_simple_solver
    : Z3_context -> Z3_solver
     
  val Z3_mk_solver_for_logic
    : Z3_context * Z3_symbol -> Z3_solver
     
  val Z3_mk_solver_from_tactic
    : Z3_context * Z3_tactic -> Z3_solver
     
  val Z3_solver_get_help
    : Z3_context * Z3_solver -> Z3_string
     
  val Z3_solver_get_param_descrs
    : Z3_context * Z3_solver -> Z3_param_descrs
     
  val Z3_solver_set_params
    : Z3_context * Z3_solver * Z3_params -> unit
     
  val Z3_solver_inc_ref
    : Z3_context * Z3_solver -> unit
     
  val Z3_solver_dec_ref
    : Z3_context * Z3_solver -> unit
     
  val Z3_solver_push
    : Z3_context * Z3_solver -> unit
     
  val Z3_solver_pop
    : Z3_context * Z3_solver * word -> unit
     
  val Z3_solver_reset
    : Z3_context * Z3_solver -> unit
     
  val Z3_solver_get_num_scopes
    : Z3_context * Z3_solver -> word
     
  val Z3_solver_assert
    : Z3_context * Z3_solver * Z3_ast -> unit
     
  val Z3_solver_assert_and_track
    : Z3_context * Z3_solver * Z3_ast * Z3_ast -> unit
     
  val Z3_solver_get_assertions
    : Z3_context * Z3_solver -> Z3_ast_vector
     
  val Z3_solver_check
    : Z3_context * Z3_solver -> Z3_lbool
     
  val Z3_solver_check_assumptions
    : Z3_context * Z3_solver * word * Z3_ast vector -> Z3_lbool
     
  val Z3_solver_get_model
    : Z3_context * Z3_solver -> Z3_model
     
  val Z3_solver_get_proof
    : Z3_context * Z3_solver -> Z3_ast
     
  val Z3_solver_get_unsat_core
    : Z3_context * Z3_solver -> Z3_ast_vector
     
  val Z3_solver_get_reason_unknown
    : Z3_context * Z3_solver -> Z3_string
     
  val Z3_solver_get_statistics
    : Z3_context * Z3_solver -> Z3_stats
     
  val Z3_solver_to_string
    : Z3_context * Z3_solver -> Z3_string

end

