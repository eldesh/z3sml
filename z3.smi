_require "basis.smi"
_require "ffi.smi"
_require "./z3_enum.smi"
_require "./z3_fixedpoint.smi"
_require "./z3_ast_vector.smi"
_require "./z3_ast_map.smi"
_require "./z3_goal.smi"
_require "./z3_tactic_and_probe.smi"
_require "./z3_solver.smi"
_require "./z3_statistics.smi"
_require "./z3_external_theory_plugin.smi"
_require "./z3_parser.smi"
_require "./z3_model.smi"
_require "./z3_accessor.smi"

structure Z3 =
struct
  type Z3_config       (= ptr)

  type Z3_symbol       (= ptr)
  type Z3_ast          (= ptr)
  type Z3_sort         (= ptr)
  type Z3_func_decl    (= ptr)
  type Z3_app          (= ptr)
  type Z3_pattern      (= ptr)
  type Z3_params       (= ptr)
  type Z3_param_descrs (= ptr)
  type Z3_model         = unit ptr
  type Z3_func_interp  (= ptr)
  type Z3_func_entry   (= ptr)
  type Z3_fixedpoint   (= ptr)
  type Z3_ast_vector   (= ptr)
  type Z3_ast_map      (= ptr)
  type Z3_tactic       (= ptr)
  type Z3_probe        (= ptr)
  type Z3_apply_result (= ptr)
  type Z3_solver       (= ptr)
  type Z3_stats        (= ptr)
  type Z3_context      (= ptr)
  type Z3_string = String.string
  type Z3_bool         (= int)

  type Z3_lbool = Z3_enum.Z3_lbool
  val Z3_L_FALSE : Z3_lbool
  val Z3_L_TRUE  : Z3_lbool
  val Z3_L_UNDEF : Z3_lbool

  type Z3_error_code = Z3_enum.Z3_error_code
  val Z3_OK                : Z3_error_code
  val Z3_SORT_ERROR        : Z3_error_code
  val Z3_IOB               : Z3_error_code
  val Z3_INVALID_ARG       : Z3_error_code
  val Z3_PARSER_ERROR      : Z3_error_code
  val Z3_NO_PARSER         : Z3_error_code
  val Z3_INVALID_PATTERN   : Z3_error_code
  val Z3_MEMOUT_FAIL       : Z3_error_code
  val Z3_FILE_ACCESS_ERROR : Z3_error_code
  val Z3_INTERNAL_FATAL    : Z3_error_code
  val Z3_INVALID_USAGE     : Z3_error_code
  val Z3_DEC_REF_ERROR     : Z3_error_code
  val Z3_EXCEPTION         : Z3_error_code

  type Z3_decl_kind      = Z3_enum.Z3_decl_kind
  type Z3_symbol_kind    = Z3_enum.Z3_symbol_kind
  type Z3_parameter_kind = Z3_enum.Z3_parameter_kind
  type Z3_ast_kind       = Z3_enum.Z3_ast_kind
  type Z3_sort_kind      = Z3_enum.Z3_sort_kind
 
  val Z3_mk_config  : unit -> Z3_config
  val Z3_del_config : Z3_config -> unit
  val Z3_mk_context : Z3_config -> Z3_context
  val Z3_mk_const : Z3_context * Z3_symbol * Z3_sort -> Z3_ast
  val Z3_del_context : Z3_context -> unit

  structure Accessor = (* Z3_Accessor *)
  struct
    type Z3_context      = Z3_context
    type Z3_symbol       = Z3_symbol
    type Z3_sort         = Z3_sort
    type Z3_ast          = Z3_ast
    type Z3_func_decl    = Z3_func_decl
    type Z3_app          = Z3_app
    type Z3_pattern      = Z3_pattern
    type Z3_param_descrs = Z3_param_descrs
    type Z3_params       = Z3_params

    type Z3_string       = Z3_string
  
    type Z3_decl_kind      = Z3_decl_kind
    type Z3_symbol_kind    = Z3_symbol_kind
    type Z3_parameter_kind = Z3_parameter_kind
    type Z3_lbool          = Z3_lbool
    type Z3_ast_kind       = Z3_ast_kind
    type Z3_sort_kind      = Z3_sort_kind
    type Z3_bool           = Z3_bool
  
    val Z3_get_symbol_kind
      : Z3_context * Z3_symbol -> Z3_symbol_kind
  
    val Z3_get_symbol_int
      : Z3_context * Z3_symbol -> int
  
    val Z3_get_symbol_string
       : Z3_context * Z3_symbol -> Z3_string
  
    val Z3_get_sort_name
      : Z3_context * Z3_sort -> Z3_symbol
  
    val Z3_get_sort_id
      : Z3_context * Z3_sort -> word
  
    val Z3_sort_to_ast
      : Z3_context * Z3_sort -> Z3_ast
  
    val Z3_is_eq_sort
      : Z3_context * Z3_sort * Z3_sort -> Z3_bool
  
    val Z3_get_sort_kind
      : Z3_context * Z3_sort -> Z3_sort_kind
  
    val Z3_get_bv_sort_size
      : Z3_context * Z3_sort -> word
  
    val Z3_get_array_sort_domain
      : Z3_context * Z3_sort -> Z3_sort
  
    val Z3_get_array_sort_range
      : Z3_context * Z3_sort -> Z3_sort
  
    val Z3_get_tuple_sort_mk_decl
      : Z3_context * Z3_sort -> Z3_func_decl
  
    val Z3_get_tuple_sort_num_fields
      : Z3_context * Z3_sort -> word
  
    val Z3_get_tuple_sort_field_decl
      : Z3_context * Z3_sort * word -> Z3_func_decl
  
    val Z3_get_datatype_sort_num_constructors
      : Z3_context * Z3_sort -> word
  
    val Z3_get_datatype_sort_constructor
      : Z3_context * Z3_sort * word -> Z3_func_decl
  
    val Z3_get_datatype_sort_recognizer
      : Z3_context * Z3_sort * word -> Z3_func_decl
  
    val Z3_get_datatype_sort_constructor_accessor
      : Z3_context * Z3_sort * word * word -> Z3_func_decl
  
    val Z3_get_relation_arity
      : Z3_context * Z3_sort -> word
  
    val Z3_get_relation_column
      : Z3_context * Z3_sort * word -> Z3_sort
  
    val Z3_func_decl_to_ast
      : Z3_context * Z3_func_decl -> Z3_ast
  
    val Z3_is_eq_func_decl
      : Z3_context * Z3_func_decl * Z3_func_decl -> Z3_bool
  
    val Z3_get_func_decl_id
      : Z3_context * Z3_func_decl -> word
  
    val Z3_get_decl_name
      : Z3_context * Z3_func_decl -> Z3_symbol
  
    val Z3_get_decl_kind
      : Z3_context * Z3_func_decl -> Z3_decl_kind
  
    val Z3_get_domain_size
      : Z3_context * Z3_func_decl -> word
  
    val Z3_get_arity
      : Z3_context * Z3_func_decl -> word
  
    val Z3_get_domain
      : Z3_context * Z3_func_decl * word -> Z3_sort
  
    val Z3_get_range
      : Z3_context * Z3_func_decl -> Z3_sort
  
    val Z3_get_decl_num_parameters
      : Z3_context * Z3_func_decl -> word
  
    val Z3_get_decl_parameter_kind
      : Z3_context * Z3_func_decl * word -> Z3_parameter_kind
  
    val Z3_get_decl_int_parameter
      : Z3_context * Z3_func_decl * word -> int
  
    val Z3_get_decl_double_parameter
      : Z3_context * Z3_func_decl * word -> real
  
    val Z3_get_decl_symbol_parameter
      : Z3_context * Z3_func_decl * word -> Z3_symbol
  
    val Z3_get_decl_sort_parameter
      : Z3_context * Z3_func_decl * word -> Z3_sort
  
    val Z3_get_decl_ast_parameter
      : Z3_context * Z3_func_decl * word -> Z3_ast
  
    val Z3_get_decl_func_decl_parameter
      : Z3_context * Z3_func_decl * word -> Z3_func_decl
  
    val Z3_get_decl_rational_parameter
       : Z3_context * Z3_func_decl * word -> Z3_string
  
    val Z3_app_to_ast
      : Z3_context * Z3_app -> Z3_ast
  
    val Z3_get_app_decl
      : Z3_context * Z3_app -> Z3_func_decl
  
    val Z3_get_app_num_args
      : Z3_context * Z3_app -> word
  
    val Z3_get_app_arg
      : Z3_context * Z3_app * word -> Z3_ast
  
    val Z3_is_eq_ast
      : Z3_context * Z3_ast * Z3_ast -> Z3_bool
  
    val Z3_get_ast_id
      : Z3_context * Z3_ast -> word
  
    val Z3_get_ast_hash
      : Z3_context * Z3_ast -> word
  
    val Z3_get_sort
      : Z3_context * Z3_ast -> Z3_sort
  
    val Z3_is_well_sorted
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_get_bool_value
      : Z3_context * Z3_ast -> Z3_lbool
  
    val Z3_get_ast_kind
      : Z3_context * Z3_ast -> Z3_ast_kind
  
    val Z3_is_app
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_is_numeral_ast
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_is_algebraic_number
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_to_app
      : Z3_context * Z3_ast -> Z3_app
  
    val Z3_to_func_decl
      : Z3_context * Z3_ast -> Z3_func_decl
  
    val Z3_get_numeral_string
       : Z3_context * Z3_ast -> Z3_string
  
    val Z3_get_numeral_decimal_string
       : Z3_context * Z3_ast * word -> Z3_string
  
    val Z3_get_numerator
      : Z3_context * Z3_ast -> Z3_ast
  
    val Z3_get_denominator
      : Z3_context * Z3_ast -> Z3_ast
  
    val Z3_get_numeral_int
      : Z3_context * Z3_ast * int ref -> Z3_bool
  
    val Z3_get_numeral_uint
      : Z3_context * Z3_ast * word ref -> Z3_bool
  
    val Z3_get_algebraic_number_lower
      : Z3_context * Z3_ast * word -> Z3_ast
  
    val Z3_get_algebraic_number_upper
      : Z3_context * Z3_ast * word -> Z3_ast
  
    val Z3_pattern_to_ast
      : Z3_context * Z3_pattern -> Z3_ast
  
    val Z3_get_pattern_num_terms
      : Z3_context * Z3_pattern -> word
  
    val Z3_get_pattern
      : Z3_context * Z3_pattern * word -> Z3_ast
  
    val Z3_get_index_value
      : Z3_context * Z3_ast -> word
  
    val Z3_is_quantifier_forall
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_get_quantifier_weight
      : Z3_context * Z3_ast -> word
  
    val Z3_get_quantifier_num_patterns
      : Z3_context * Z3_ast -> word
  
    val Z3_get_quantifier_pattern_ast
      : Z3_context * Z3_ast * word -> Z3_pattern
  
    val Z3_get_quantifier_num_no_patterns
      : Z3_context * Z3_ast -> word
  
    val Z3_get_quantifier_no_pattern_ast
      : Z3_context * Z3_ast * word -> Z3_ast
  
    val Z3_get_quantifier_num_bound
      : Z3_context * Z3_ast -> word
  
    val Z3_get_quantifier_bound_name
      : Z3_context * Z3_ast * word -> Z3_symbol
  
    val Z3_get_quantifier_bound_sort
      : Z3_context * Z3_ast * word -> Z3_sort
  
    val Z3_get_quantifier_body
      : Z3_context * Z3_ast -> Z3_ast
  
    val Z3_simplify
      : Z3_context * Z3_ast -> Z3_ast
  
    val Z3_simplify_ex
      : Z3_context * Z3_ast * Z3_params -> Z3_ast
  
    val Z3_simplify_get_help
       : Z3_context -> Z3_string
  
    val Z3_simplify_get_param_descrs
      : Z3_context -> Z3_param_descrs
  
  end


  structure Model = (* Z3_Models *)
  struct
    type Z3_context     = Z3_context
    type Z3_model       = Z3_model
    type Z3_ast         = Z3_ast
    type Z3_func_decl   = Z3_func_decl
    type Z3_func_interp = Z3_func_interp
    type Z3_sort        = Z3_sort
    type Z3_func_entry  = Z3_func_entry
    type Z3_bool        = Z3_bool

    val Z3_model_inc_ref
      : Z3_context * Z3_model -> unit
  
    val Z3_model_dec_ref
      : Z3_context * Z3_model -> unit
  
    val Z3_model_eval
      : Z3_context * Z3_model * Z3_ast * Z3_bool * Z3_ast ref -> Z3_bool
  
    val Z3_model_get_const_interp
      : Z3_context * Z3_model * Z3_func_decl -> Z3_ast
  
    val Z3_model_get_func_interp
      : Z3_context * Z3_model * Z3_func_decl -> Z3_func_interp
  
    val Z3_model_get_num_consts
      : Z3_context * Z3_model -> word
  
    val Z3_model_get_const_decl
      : Z3_context * Z3_model * word -> Z3_func_decl
  
    val Z3_model_get_num_funcs
      : Z3_context * Z3_model -> word
  
    val Z3_model_get_func_decl
      : Z3_context * Z3_model * word -> Z3_func_decl
  
    val Z3_model_get_num_sorts
      : Z3_context * Z3_model -> word
  
    val Z3_model_get_sort
      : Z3_context * Z3_model * word -> Z3_sort
  
    val Z3_model_get_sort_universe
      : Z3_context * Z3_model * Z3_sort -> Z3_ast_vector
  
    val Z3_is_as_array
      : Z3_context * Z3_ast -> Z3_bool
  
    val Z3_get_as_array_func_decl
      : Z3_context * Z3_ast -> Z3_func_decl
  
    val Z3_func_interp_inc_ref
      : Z3_context * Z3_func_interp -> unit
  
    val Z3_func_interp_dec_ref
      : Z3_context * Z3_func_interp -> unit
  
    val Z3_func_interp_get_num_entries
      : Z3_context * Z3_func_interp -> word
  
    val Z3_func_interp_get_entry
      : Z3_context * Z3_func_interp * word -> Z3_func_entry
  
    val Z3_func_interp_get_else
      : Z3_context * Z3_func_interp -> Z3_ast
  
    val Z3_func_interp_get_arity
      : Z3_context * Z3_func_interp -> word
  
    val Z3_func_entry_inc_ref
      : Z3_context * Z3_func_entry -> unit
  
    val Z3_func_entry_dec_ref
      : Z3_context * Z3_func_entry -> unit
  
    val Z3_func_entry_get_value
      : Z3_context * Z3_func_entry -> Z3_ast
  
    val Z3_func_entry_get_num_args
      : Z3_context * Z3_func_entry -> word
  
    val Z3_func_entry_get_arg
      : Z3_context * Z3_func_entry * word -> Z3_ast
  
  end

  structure Parser = (* Z3_Parser *)
  struct
    type Z3_symbol    = Z3_symbol
    type Z3_ast       = Z3_ast
    type Z3_context   = Z3_context
    type Z3_sort      = Z3_sort
    type Z3_func_decl = Z3_func_decl
    type Z3_string    = Z3_string

    val Z3_parse_smtlib2_string
      : Z3_context * Z3_string * word
                   * Z3_symbol vector * Z3_sort * word
                   * Z3_symbol vector
                   * Z3_func_decl vector
                  -> Z3_ast
  
    val Z3_parse_smtlib2_file
      : Z3_context * Z3_string * word
                   * Z3_symbol vector * Z3_sort * word
                   * Z3_symbol vector * Z3_func_decl vector
                  -> Z3_ast
  
    val Z3_parse_smtlib_string
      : Z3_context * Z3_string * word
                   * Z3_symbol vector * Z3_sort * word
                   * Z3_symbol vector * Z3_func_decl vector
                  -> unit
  
    val Z3_parse_smtlib_file
      : Z3_context * Z3_string * word
                   * Z3_symbol vector * Z3_sort * word
                   * Z3_symbol vector * Z3_func_decl vector
                  -> unit
  
    val Z3_get_smtlib_num_formulas
      : Z3_context -> word
  
    val Z3_get_smtlib_formula
      : Z3_context * word -> Z3_ast
  
    val Z3_get_smtlib_num_assumptions
      : Z3_context -> word
  
    val Z3_get_smtlib_assumption
      : Z3_context * word -> Z3_ast
  
    val Z3_get_smtlib_num_decls
      : Z3_context -> word
  
    val Z3_get_smtlib_decl
      : Z3_context * word -> Z3_func_decl
  
    val Z3_get_smtlib_num_sorts
      : Z3_context -> word
  
    val Z3_get_smtlib_sort
      : Z3_context * word -> Z3_sort
  
     val Z3_get_smtlib_error
        : Z3_context -> Z3_string
  
  end

  val Z3_func_decl_to_string : Z3_context * Z3_func_decl -> Z3_string
  val Z3_ast_to_string : Z3_context * Z3_ast -> Z3_string

  val Z3_set_param_value : Z3_config * Z3_string * Z3_string -> unit

  val Z3_mk_string_symbol : Z3_context * Z3_string -> Z3_symbol
  type Z3_error_handler = Z3_context * Z3_error_code -> unit
  val Z3_set_error_handler : Z3_context * Z3_error_handler -> unit

  val Z3_mk_int_sort : Z3_context -> Z3_sort
  val Z3_mk_bool_sort : Z3_context -> Z3_sort
  val Z3_mk_int : Z3_context * int * Z3_sort -> Z3_ast

  val Z3_mk_add : Z3_context * word * Z3_ast vector -> Z3_ast
  val Z3_mk_mul : Z3_context * word * Z3_ast vector -> Z3_ast

  val Z3_model_to_string : Z3_context * Z3_model -> string
  val Z3_mk_lt : Z3_context * Z3_ast * Z3_ast -> Z3_ast
  val Z3_mk_le : Z3_context * Z3_ast * Z3_ast -> Z3_ast
  val Z3_mk_gt : Z3_context * Z3_ast * Z3_ast -> Z3_ast
  val Z3_mk_ge : Z3_context * Z3_ast * Z3_ast -> Z3_ast
  val Z3_mk_eq : Z3_context * Z3_ast * Z3_ast -> Z3_ast
  val Z3_mk_not : Z3_context * Z3_ast -> Z3_ast
  val Z3_mk_xor : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_get_version
    : word ref * word ref * word ref * word ref -> unit

  val Z3_enable_trace
    : Z3_string -> unit

  val Z3_disable_trace
    : Z3_string -> unit

  val Z3_reset_memory
    : unit -> unit

  structure Solver = (* Z3_Solver *)
  struct
    type Z3_context      = Z3_context
    type Z3_solver       = Z3_solver
    type Z3_symbol       = Z3_symbol
    type Z3_tactic       = Z3_tactic
    type Z3_params       = Z3_params
    type Z3_param_descrs = Z3_param_descrs
    type Z3_model        = Z3_model
    type Z3_stats        = Z3_stats
    type Z3_ast          = Z3_ast
    type Z3_ast_vector   = Z3_ast_vector
    type Z3_string       = Z3_string
    type Z3_lbool        = Z3_lbool

    val Z3_mk_solver
      : Z3_context -> Z3_solver
       
    val Z3_mk_simple_solver
      : Z3_context -> Z3_solver
       
    val Z3_mk_solver_for_logic
      : Z3_context * Z3_symbol -> Z3_solver
       
    val Z3_mk_solver_from_tactic
      : Z3_context * Z3_tactic -> Z3_solver
       
    val Z3_solver_get_help
      : Z3_context * Z3_solver -> Z3_string
       
    val Z3_solver_get_param_descrs
      : Z3_context * Z3_solver -> Z3_param_descrs
       
    val Z3_solver_set_params
      : Z3_context * Z3_solver * Z3_params -> unit
       
    val Z3_solver_inc_ref
      : Z3_context * Z3_solver -> unit
       
    val Z3_solver_dec_ref
      : Z3_context * Z3_solver -> unit
       
    val Z3_solver_push
      : Z3_context * Z3_solver -> unit
       
    val Z3_solver_pop
      : Z3_context * Z3_solver * word -> unit
       
    val Z3_solver_reset
      : Z3_context * Z3_solver -> unit
       
    val Z3_solver_get_num_scopes
      : Z3_context * Z3_solver -> word
       
    val Z3_solver_assert
      : Z3_context * Z3_solver * Z3_ast -> unit
       
    val Z3_solver_assert_and_track
      : Z3_context * Z3_solver * Z3_ast * Z3_ast -> unit
       
    val Z3_solver_get_assertions
      : Z3_context * Z3_solver -> Z3_ast_vector
       
    val Z3_solver_check
      : Z3_context * Z3_solver -> Z3_lbool
       
    val Z3_solver_check_assumptions
      : Z3_context * Z3_solver * word * Z3_ast vector -> Z3_lbool
       
    val Z3_solver_get_model
      : Z3_context * Z3_solver -> Z3_model
       
    val Z3_solver_get_proof
      : Z3_context * Z3_solver -> Z3_ast
       
    val Z3_solver_get_unsat_core
      : Z3_context * Z3_solver -> Z3_ast_vector
       
    val Z3_solver_get_reason_unknown
      : Z3_context * Z3_solver -> Z3_string
       
    val Z3_solver_get_statistics
      : Z3_context * Z3_solver -> Z3_stats
       
    val Z3_solver_to_string
      : Z3_context * Z3_solver -> Z3_string
  end (* Solver *)

  structure Deprecated =
  struct
    val Z3_check_and_get_model : Z3_context * Z3_model ref -> Z3_lbool
    val Z3_check : Z3_context -> Z3_lbool
    val Z3_del_model : Z3_context * Z3_model -> unit
    val Z3_assert_cnstr : Z3_context * Z3_ast -> unit
	val Z3_context_to_string : Z3_context -> string
  end

end

