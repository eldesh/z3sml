_require "basis.smi"
_require "ffi.smi"
_require "libh.smi"

structure Z3_Quantifier =
struct
  type Z3_context = unit ptr
  type Z3_pattern = unit ptr
  type Z3_sort    = unit ptr
  type Z3_ast     = unit ptr
  type Z3_app     = unit ptr
  type Z3_symbol  = unit ptr
  type Z3_bool    = int

  val Z3_mk_pattern
    : Z3_context * word * Z3_ast vector -> Z3_pattern

  val Z3_mk_bound
    : Z3_context * word * Z3_sort -> Z3_ast

  val Z3_mk_forall
    : Z3_context * word
                 * word * Z3_pattern vector
                 * word * Z3_sort vector * Z3_symbol vector
                 * Z3_ast -> Z3_ast

  val Z3_mk_exists
    : Z3_context * word * word * Z3_pattern * word
                 * Z3_sort * Z3_symbol vector * Z3_ast
                -> Z3_ast

  val Z3_mk_quantifier
    : Z3_context * Z3_bool * word * word
                 * Z3_pattern * word * Z3_sort
                 * Z3_symbol vector * Z3_ast -> Z3_ast

  val Z3_mk_quantifier_ex
    : Z3_context * Z3_bool * word
                 * Z3_symbol * Z3_symbol * word
                 * Z3_pattern * word * Z3_ast vector
                 * word * Z3_sort * Z3_symbol vector * Z3_ast
                -> Z3_ast

  val Z3_mk_forall_const
    : Z3_context * word * word * Z3_app * word
                 * Z3_pattern * Z3_ast -> Z3_ast

  val Z3_mk_exists_const
    : Z3_context * word * word * Z3_app * word
                 * Z3_pattern * Z3_ast -> Z3_ast

  val Z3_mk_quantifier_const
    : Z3_context * Z3_bool * word * word
                 * Z3_app * word * Z3_pattern * Z3_ast
                -> Z3_ast

  val Z3_mk_quantifier_const_ex
    : Z3_context * Z3_bool * word * Z3_symbol
                 * Z3_symbol * word * Z3_app * word
                 * Z3_pattern * word * Z3_ast vector * Z3_ast
                -> Z3_ast

end

