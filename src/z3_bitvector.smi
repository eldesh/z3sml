_require "basis.smi"
_require "ffi.smi"

structure Z3_BitVector =
struct
  type Z3_context = unit ptr
  type Z3_ast     = unit ptr
  type Z3_bool    = int

  val Z3_mk_bvnot
    : Z3_context * Z3_ast -> Z3_ast

  val Z3_mk_bvredand
    : Z3_context * Z3_ast -> Z3_ast

  val Z3_mk_bvredor
    : Z3_context * Z3_ast -> Z3_ast

  val Z3_mk_bvand
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvor
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvxor
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvnand
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvnor
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvxnor
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvneg
    : Z3_context * Z3_ast -> Z3_ast

  val Z3_mk_bvadd
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsub
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvmul
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvudiv
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsdiv
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvurem
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsrem
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsmod
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvult
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvslt
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvule
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsle
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvuge
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsge
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvugt
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsgt
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_concat
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_extract
    : Z3_context * word * word * Z3_ast -> Z3_ast

  val Z3_mk_sign_ext
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_zero_ext
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_repeat
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_bvshl
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvlshr
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvashr
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_rotate_left
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_rotate_right
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_ext_rotate_left
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_ext_rotate_right
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_int2bv
    : Z3_context * word * Z3_ast -> Z3_ast

  val Z3_mk_bv2int
    : Z3_context * Z3_ast * Z3_bool -> Z3_ast

  val Z3_mk_bvadd_no_overflow
    : Z3_context * Z3_ast * Z3_ast * Z3_bool -> Z3_ast

  val Z3_mk_bvadd_no_underflow
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsub_no_overflow
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvsub_no_underflow
    : Z3_context * Z3_ast * Z3_ast * Z3_bool -> Z3_ast

  val Z3_mk_bvsdiv_no_overflow
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

  val Z3_mk_bvneg_no_overflow
    : Z3_context * Z3_ast -> Z3_ast

  val Z3_mk_bvmul_no_overflow
    : Z3_context * Z3_ast * Z3_ast * Z3_bool -> Z3_ast

  val Z3_mk_bvmul_no_underflow
    : Z3_context * Z3_ast * Z3_ast -> Z3_ast

end


